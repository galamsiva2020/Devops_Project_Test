package net.barik.spreadsheet.analysis;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType[] var0 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.String var11 = var1.name();
    boolean var13 = var1.equals((java.lang.Object)5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var12 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    java.lang.String var2 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var6.equals((java.lang.Object)var10);
    java.lang.Class var12 = var10.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.String var17 = var16.name();
    boolean var18 = var1.equals((java.lang.Object)var17);
    java.lang.String var19 = var1.toString();
    java.lang.String var20 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    int var2 = var1.ordinal();
    int var3 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 5);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.Class var11 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    boolean var21 = var9.equals((java.lang.Object)1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var23 = var22.name();
    java.lang.Class var24 = var22.getDeclaringClass();
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "ERROR");
    java.lang.Class var27 = var26.getDeclaringClass();
    java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "STRING");
    java.lang.String var30 = var29.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var31 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var32 = var29.equals((java.lang.Object)var31);
    boolean var33 = var9.equals((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "ERROR"+ "'", var23.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "STRING"+ "'", var30.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.toString();
    int var9 = var1.ordinal();
    java.lang.String var10 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    java.lang.String var8 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    int var10 = var8.ordinal();
    java.lang.String var11 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var10 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var9.name();
    java.lang.Class var21 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)(short)100);
    java.lang.String var11 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    int var20 = var9.ordinal();
    java.lang.String var21 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(3);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "BLANK"+ "'", var3.equals("BLANK"));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    java.lang.String var12 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.name();
    boolean var17 = var9.equals((java.lang.Object)var16);
    boolean var19 = var9.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var6 = var5.toString();
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.name();
    java.lang.String var11 = var9.toString();
    boolean var12 = var1.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)true);
    java.lang.String var11 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var12 = var11.name();
    java.lang.String var13 = var11.toString();
    int var14 = var11.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 5);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.String var14 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    java.lang.String var16 = var13.name();
    int var17 = var13.ordinal();
    boolean var19 = var13.equals((java.lang.Object)100L);
    boolean var20 = var1.equals((java.lang.Object)var13);
    java.lang.Class var21 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.String var11 = var5.toString();
    java.lang.String var12 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    int var21 = var19.ordinal();
    boolean var22 = var13.equals((java.lang.Object)var21);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var23 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var24 = var13.equals((java.lang.Object)var23);
    boolean var25 = var9.equals((java.lang.Object)var23);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var31.getDeclaringClass();
    boolean var34 = var9.equals((java.lang.Object)var31);
    int var35 = var31.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 5);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var6.name();
    java.lang.String var12 = var6.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.String var11 = var1.name();
    java.lang.String var12 = var1.name();
    java.lang.String var13 = var1.name();
    java.lang.Class var14 = var1.getDeclaringClass();
    java.lang.Class var15 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var13 = var12.name();
    boolean var15 = var12.equals((java.lang.Object)1.0d);
    java.lang.Class var16 = var12.getDeclaringClass();
    java.lang.Enum var18 = java.lang.Enum.<java.lang.Enum>valueOf(var16, "STRING");
    boolean var19 = var9.equals((java.lang.Object)var18);
    java.lang.String var20 = var9.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.Class var2 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var5 = var4.toString();
    java.lang.Class var6 = var4.getDeclaringClass();
    java.lang.String var7 = var4.toString();
    java.lang.String var8 = var4.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var11 = var10.name();
    java.lang.String var12 = var10.toString();
    boolean var14 = var10.equals((java.lang.Object)(byte)100);
    boolean var15 = var4.equals((java.lang.Object)var10);
    boolean var16 = var1.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.String var18 = var9.name();
    java.lang.Class var19 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "STRING"+ "'", var18.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var6.equals((java.lang.Object)var10);
    java.lang.Class var12 = var6.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    boolean var17 = var1.equals((java.lang.Object)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var11 = var10.name();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.name();
    java.lang.Class var14 = var10.getDeclaringClass();
    java.lang.String var15 = var10.name();
    boolean var16 = var1.equals((java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    int var11 = var10.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    int var3 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    java.lang.Class var13 = var10.getDeclaringClass();
    java.lang.String var14 = var10.name();
    java.lang.Class var15 = var10.getDeclaringClass();
    boolean var16 = var5.equals((java.lang.Object)var10);
    java.lang.String var17 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("BLANK");
    boolean var16 = var13.equals((java.lang.Object)var15);
    java.lang.Class var17 = var13.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.Class var8 = var7.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var11 = var10.getDeclaringClass();
    java.lang.String var12 = var10.name();
    boolean var13 = var7.equals((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var21.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var21.equals((java.lang.Object)var25);
    java.lang.Class var27 = var25.getDeclaringClass();
    java.lang.String var28 = var25.name();
    boolean var29 = var19.equals((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    java.lang.Class var6 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    boolean var7 = var1.equals((java.lang.Object)(short)1);
    java.lang.Class var8 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var1.toString();
    java.lang.String var12 = var1.toString();
    java.lang.String var13 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    java.lang.String var8 = var5.name();
    boolean var9 = var1.equals((java.lang.Object)var5);
    java.lang.String var10 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    int var3 = var1.ordinal();
    java.lang.String var4 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.String var11 = var5.name();
    java.lang.Class var12 = var5.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    java.lang.Class var14 = var12.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "ERROR");
    java.lang.Class var17 = var16.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.String var20 = var19.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var21 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var22 = var19.equals((java.lang.Object)var21);
    boolean var23 = var9.equals((java.lang.Object)var22);
    java.lang.Class var24 = var9.getDeclaringClass();
    boolean var26 = var9.equals((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    java.lang.Class var17 = var1.getDeclaringClass();
    int var18 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var20.equals((java.lang.Object)(byte)10);
    java.lang.Class var23 = var20.getDeclaringClass();
    java.lang.String var24 = var20.name();
    java.lang.String var25 = var20.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var28 = var27.name();
    java.lang.String var29 = var27.toString();
    java.lang.Class var30 = var27.getDeclaringClass();
    java.lang.Enum var32 = java.lang.Enum.<java.lang.Enum>valueOf(var30, "ERROR");
    boolean var33 = var20.equals((java.lang.Object)var32);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var35 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var39 = var37.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var41 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var42 = var37.equals((java.lang.Object)var41);
    int var43 = var41.ordinal();
    boolean var44 = var35.equals((java.lang.Object)var43);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var45 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var46 = var35.equals((java.lang.Object)var45);
    boolean var47 = var45.isMacroDetected();
    boolean var48 = var45.isMacroDetected();
    boolean var49 = var45.isMacroDetected();
    boolean var50 = var45.isMacroDetected();
    boolean var51 = var45.isMacroDetected();
    boolean var52 = var32.equals((java.lang.Object)var45);
    boolean var53 = var45.isMacroDetected();
    boolean var54 = var45.isMacroDetected();
    boolean var55 = var1.equals((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "STRING"+ "'", var24.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ERROR"+ "'", var28.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ERROR"+ "'", var29.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)(short)100);
    java.lang.String var11 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.String var9 = var8.toString();
    int var10 = var8.ordinal();
    java.lang.Class var11 = var8.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    int var10 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var13 = var11.equals((java.lang.Object)10);
    java.lang.String var14 = var11.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    java.lang.Class var19 = var16.getDeclaringClass();
    java.lang.String var20 = var16.name();
    java.lang.String var21 = var16.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var24 = var23.name();
    java.lang.String var25 = var23.toString();
    java.lang.Class var26 = var23.getDeclaringClass();
    java.lang.Enum var28 = java.lang.Enum.<java.lang.Enum>valueOf(var26, "ERROR");
    boolean var29 = var16.equals((java.lang.Object)var28);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var35 = var33.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var38 = var33.equals((java.lang.Object)var37);
    int var39 = var37.ordinal();
    boolean var40 = var31.equals((java.lang.Object)var39);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var41 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var42 = var31.equals((java.lang.Object)var41);
    boolean var43 = var41.isMacroDetected();
    boolean var44 = var41.isMacroDetected();
    boolean var45 = var41.isMacroDetected();
    boolean var46 = var41.isMacroDetected();
    boolean var47 = var41.isMacroDetected();
    boolean var48 = var28.equals((java.lang.Object)var41);
    boolean var49 = var41.isMacroDetected();
    boolean var50 = var41.isMacroDetected();
    boolean var51 = var41.isMacroDetected();
    boolean var52 = var11.equals((java.lang.Object)var41);
    java.lang.String var53 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "ERROR"+ "'", var53.equals("ERROR"));

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    java.lang.Class var17 = var1.getDeclaringClass();
    int var18 = var1.ordinal();
    java.lang.String var19 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.name();
    java.lang.Class var10 = var4.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)true);
    java.lang.String var11 = var5.name();
    java.lang.String var12 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    int var20 = var9.ordinal();
    java.lang.Class var21 = var9.getDeclaringClass();
    java.lang.String var22 = var9.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("BLANK");
    boolean var16 = var13.equals((java.lang.Object)var15);
    int var17 = var13.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 6);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    java.lang.Class var13 = var10.getDeclaringClass();
    java.lang.String var14 = var10.name();
    java.lang.Class var15 = var10.getDeclaringClass();
    boolean var16 = var5.equals((java.lang.Object)var10);
    java.lang.Class var17 = var5.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.name();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.Class var11 = var5.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "BLANK");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    java.lang.Class var6 = var1.getDeclaringClass();
    int var7 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.Class var2 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    java.lang.Class var10 = var8.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "ERROR");
    java.lang.String var13 = var12.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var16 = var12.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var19 = var18.ordinal();
    java.lang.String var20 = var18.toString();
    int var21 = var18.ordinal();
    boolean var22 = var12.equals((java.lang.Object)var18);
    boolean var23 = var1.equals((java.lang.Object)var18);
    java.lang.String var24 = var18.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "STRING"+ "'", var24.equals("STRING"));

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.name();
    java.lang.String var10 = var8.toString();
    java.lang.Class var11 = var8.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    boolean var14 = var1.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    int var16 = var13.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 3);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    int var11 = var6.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var17.getDeclaringClass();
    java.lang.String var20 = var17.name();
    boolean var21 = var6.equals((java.lang.Object)var20);
    int var22 = var6.ordinal();
    int var23 = var6.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var9 = var8.name();
    boolean var11 = var8.equals((java.lang.Object)1.0d);
    java.lang.Class var12 = var8.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.String var15 = var14.toString();
    boolean var16 = var1.equals((java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "STRING"+ "'", var15.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    java.lang.Class var17 = var1.getDeclaringClass();
    java.lang.String var18 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.name();
    java.lang.Class var10 = var4.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.Class var11 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    java.lang.Class var15 = var13.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var17.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var17.equals((java.lang.Object)var21);
    boolean var23 = var13.equals((java.lang.Object)var21);
    int var24 = var21.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var28 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var30 = var28.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var33 = var28.equals((java.lang.Object)var32);
    int var34 = var32.ordinal();
    boolean var35 = var26.equals((java.lang.Object)var34);
    java.lang.String var36 = var26.name();
    boolean var38 = var26.equals((java.lang.Object)(short)0);
    boolean var39 = var21.equals((java.lang.Object)(short)0);
    boolean var40 = var1.equals((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ERROR"+ "'", var36.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Class var6 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.Class var18 = var1.getDeclaringClass();
    java.lang.String var19 = var1.toString();
    java.lang.String var20 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.Class var2 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    java.lang.Class var10 = var8.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "ERROR");
    java.lang.String var13 = var12.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var16 = var12.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var19 = var18.ordinal();
    java.lang.String var20 = var18.toString();
    int var21 = var18.ordinal();
    boolean var22 = var12.equals((java.lang.Object)var18);
    boolean var23 = var1.equals((java.lang.Object)var18);
    int var24 = var18.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var9.getDeclaringClass();
    java.lang.String var13 = var9.name();
    int var14 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 5);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    java.lang.Class var11 = var9.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "STRING");
    boolean var20 = var1.equals((java.lang.Object)var19);
    java.lang.String var21 = var19.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var23 = var22.name();
    java.lang.Class var24 = var22.getDeclaringClass();
    boolean var25 = var1.equals((java.lang.Object)var22);
    java.lang.Class var26 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "ERROR"+ "'", var23.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.name();
    java.lang.String var10 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    java.lang.Class var11 = var9.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    boolean var15 = var13.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var19.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var19.equals((java.lang.Object)var23);
    int var25 = var23.ordinal();
    boolean var26 = var17.equals((java.lang.Object)var25);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var27 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var28 = var17.equals((java.lang.Object)var27);
    boolean var29 = var13.equals((java.lang.Object)var27);
    boolean var30 = var1.equals((java.lang.Object)var13);
    java.lang.String var31 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "ERROR"+ "'", var31.equals("ERROR"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.String var11 = var5.name();
    int var12 = var5.ordinal();
    java.lang.String var13 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.String var8 = var7.toString();
    java.lang.Class var9 = var7.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var11.getDeclaringClass();
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "STRING");
    boolean var18 = var1.equals((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.Class var11 = var1.getDeclaringClass();
    java.lang.Class var12 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.String var18 = var9.name();
    int var19 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "STRING"+ "'", var18.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 5);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(3);
    java.lang.Class var2 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.Class var18 = var1.getDeclaringClass();
    java.lang.String var19 = var1.toString();
    int var20 = var1.ordinal();
    java.lang.String var21 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    int var10 = var8.ordinal();
    java.lang.String var11 = var8.name();
    boolean var12 = var1.equals((java.lang.Object)var8);
    java.lang.String var13 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    boolean var7 = var1.equals((java.lang.Object)(short)1);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    boolean var10 = var1.equals((java.lang.Object)"ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var9.getDeclaringClass();
    java.lang.Class var13 = var9.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var16 = var15.toString();
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.String var18 = var15.toString();
    java.lang.String var19 = var15.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var22 = var21.name();
    java.lang.String var23 = var21.toString();
    boolean var25 = var21.equals((java.lang.Object)(byte)100);
    boolean var26 = var15.equals((java.lang.Object)var21);
    boolean var27 = var9.equals((java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "ERROR"+ "'", var23.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.toString();
    java.lang.Class var9 = var7.getDeclaringClass();
    java.lang.String var10 = var7.toString();
    java.lang.String var11 = var7.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    java.lang.String var15 = var13.toString();
    boolean var17 = var13.equals((java.lang.Object)(byte)100);
    boolean var18 = var7.equals((java.lang.Object)var13);
    boolean var19 = var1.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.String var11 = var1.name();
    java.lang.String var12 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var14.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var14.equals((java.lang.Object)var18);
    java.lang.Class var20 = var14.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var22.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var27 = var22.equals((java.lang.Object)var26);
    java.lang.Class var28 = var22.getDeclaringClass();
    java.lang.String var29 = var22.toString();
    boolean var30 = var14.equals((java.lang.Object)var22);
    java.lang.Class var31 = var14.getDeclaringClass();
    java.lang.String var32 = var14.toString();
    int var33 = var14.ordinal();
    boolean var34 = var1.equals((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "STRING"+ "'", var29.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "STRING"+ "'", var32.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.String var11 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var15 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var16 = var13.equals((java.lang.Object)var15);
    boolean var17 = var5.equals((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    int var9 = var8.ordinal();
    java.lang.String var10 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.Class var5 = var1.getDeclaringClass();
    int var6 = var1.ordinal();
    java.lang.String var7 = var1.toString();
    int var8 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    boolean var9 = var1.equals((java.lang.Object)var6);
    java.lang.String var10 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var10 = var9.getDeclaringClass();
    int var11 = var9.ordinal();
    int var12 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var6.name();
    int var12 = var6.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    int var22 = var20.ordinal();
    boolean var23 = var14.equals((java.lang.Object)var22);
    java.lang.String var24 = var14.name();
    boolean var26 = var14.equals((java.lang.Object)(short)0);
    boolean var27 = var9.equals((java.lang.Object)(short)0);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var30 = var29.name();
    java.lang.Class var31 = var29.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var35 = var33.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var38 = var33.equals((java.lang.Object)var37);
    boolean var39 = var29.equals((java.lang.Object)var37);
    int var40 = var37.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var42 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var43 = var42.name();
    java.lang.String var44 = var42.name();
    boolean var45 = var37.equals((java.lang.Object)var44);
    boolean var46 = var9.equals((java.lang.Object)var45);
    java.lang.Class var47 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ERROR"+ "'", var30.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ERROR"+ "'", var43.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ERROR"+ "'", var44.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.String var4 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    boolean var8 = var5.equals((java.lang.Object)0L);
    int var9 = var5.ordinal();
    java.lang.String var10 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    java.lang.Class var14 = var12.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "ERROR");
    java.lang.Class var17 = var16.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var22 = var21.name();
    java.lang.String var23 = var21.toString();
    boolean var25 = var21.equals((java.lang.Object)(byte)100);
    java.lang.String var26 = var21.toString();
    java.lang.Class var27 = var21.getDeclaringClass();
    boolean var28 = var19.equals((java.lang.Object)var21);
    boolean var29 = var5.equals((java.lang.Object)var28);
    java.lang.Class var30 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var32 = java.lang.Enum.<java.lang.Enum>valueOf(var30, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "ERROR"+ "'", var23.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ERROR"+ "'", var26.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.String var18 = var9.name();
    java.lang.String var19 = var9.name();
    int var20 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "STRING"+ "'", var18.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var4 = var3.name();
    java.lang.String var5 = var3.toString();
    java.lang.Class var6 = var3.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    boolean var9 = var1.equals((java.lang.Object)"ERROR");
    java.lang.String var10 = var1.toString();
    int var11 = var1.ordinal();
    int var12 = var1.ordinal();
    java.lang.Class var13 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var9.name();
    java.lang.String var21 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    java.lang.String var10 = var8.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "BLANK");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(1);
    boolean var5 = var1.equals((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    java.lang.Class var10 = var8.getDeclaringClass();
    boolean var11 = var1.equals((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.toString();
    java.lang.Class var8 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var8, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    java.lang.Class var11 = var5.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.String var20 = var13.toString();
    boolean var21 = var5.equals((java.lang.Object)var13);
    boolean var22 = var1.equals((java.lang.Object)var13);
    int var23 = var13.ordinal();
    java.lang.String var24 = var13.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "STRING"+ "'", var24.equals("STRING"));

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    int var21 = var1.ordinal();
    boolean var23 = var1.equals((java.lang.Object)"STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    int var10 = var8.ordinal();
    java.lang.String var11 = var8.name();
    boolean var12 = var1.equals((java.lang.Object)var8);
    int var13 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("BLANK");
    boolean var16 = var13.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    java.lang.Class var9 = var3.getDeclaringClass();
    int var10 = var3.ordinal();
    java.lang.Class var11 = var3.getDeclaringClass();
    java.lang.String var12 = var3.name();
    boolean var13 = var1.equals((java.lang.Object)var12);
    java.lang.Class var14 = var1.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    boolean var8 = var5.equals((java.lang.Object)0L);
    java.lang.String var9 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.name();
    int var9 = var1.ordinal();
    java.lang.String var10 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    boolean var9 = var1.equals((java.lang.Object)var6);
    java.lang.Class var10 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var6 = var5.name();
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var10 = var9.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "STRING");
    java.lang.String var13 = var12.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var14 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var15 = var12.equals((java.lang.Object)var14);
    java.lang.Class var16 = var12.getDeclaringClass();
    java.lang.Enum var18 = java.lang.Enum.<java.lang.Enum>valueOf(var16, "STRING");
    java.lang.String var19 = var18.toString();
    boolean var20 = var1.equals((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var10 = var9.name();
    java.lang.Class var11 = var9.getDeclaringClass();
    java.lang.Class var12 = var9.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    boolean var15 = var4.equals((java.lang.Object)"ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    int var21 = var19.ordinal();
    boolean var22 = var13.equals((java.lang.Object)var21);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var23 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var24 = var13.equals((java.lang.Object)var23);
    boolean var25 = var9.equals((java.lang.Object)var23);
    boolean var26 = var23.isMacroDetected();
    boolean var27 = var23.isMacroDetected();
    boolean var28 = var23.isMacroDetected();
    boolean var29 = var23.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.Class var2 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var9.getDeclaringClass();
    java.lang.String var13 = var9.name();
    java.lang.Class var14 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    java.lang.String var7 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    java.lang.String var12 = var7.toString();
    java.lang.Class var13 = var7.getDeclaringClass();
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    boolean var19 = var1.equals((java.lang.Object)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.String var3 = var1.name();
    boolean var5 = var1.equals((java.lang.Object)0.0f);
    java.lang.String var6 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(3);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    java.lang.String var19 = var18.name();
    boolean var20 = var16.equals((java.lang.Object)var19);
    boolean var21 = var13.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.name();
    int var9 = var1.ordinal();
    java.lang.Class var10 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.name();
    java.lang.String var7 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.Class var18 = var1.getDeclaringClass();
    java.lang.String var19 = var1.toString();
    int var20 = var1.ordinal();
    int var21 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.Class var8 = var7.getDeclaringClass();
    java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var8, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    int var7 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var10 = var9.toString();
    int var11 = var9.ordinal();
    java.lang.Class var12 = var9.getDeclaringClass();
    int var13 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    java.lang.Class var21 = var15.getDeclaringClass();
    java.lang.String var22 = var15.toString();
    int var23 = var15.ordinal();
    boolean var24 = var9.equals((java.lang.Object)var15);
    boolean var25 = var5.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    int var21 = var19.ordinal();
    boolean var22 = var13.equals((java.lang.Object)var21);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var23 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var24 = var13.equals((java.lang.Object)var23);
    boolean var25 = var9.equals((java.lang.Object)var23);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var31.getDeclaringClass();
    boolean var34 = var9.equals((java.lang.Object)var31);
    int var35 = var9.ordinal();
    java.lang.String var36 = var9.name();
    java.lang.String var37 = var9.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ERROR"+ "'", var36.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "ERROR"+ "'", var37.equals("ERROR"));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.toString();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.name();
    java.lang.String var10 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    boolean var19 = var16.equals((java.lang.Object)0L);
    int var20 = var16.ordinal();
    java.lang.String var21 = var16.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var24 = var23.name();
    java.lang.Class var25 = var23.getDeclaringClass();
    java.lang.Enum var27 = java.lang.Enum.<java.lang.Enum>valueOf(var25, "ERROR");
    java.lang.Class var28 = var27.getDeclaringClass();
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var33 = var32.name();
    java.lang.String var34 = var32.toString();
    boolean var36 = var32.equals((java.lang.Object)(byte)100);
    java.lang.String var37 = var32.toString();
    java.lang.Class var38 = var32.getDeclaringClass();
    boolean var39 = var30.equals((java.lang.Object)var32);
    boolean var40 = var16.equals((java.lang.Object)var39);
    java.lang.Class var41 = var16.getDeclaringClass();
    boolean var42 = var1.equals((java.lang.Object)var41);
    java.lang.String var43 = var1.toString();
    java.lang.String var44 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ERROR"+ "'", var33.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ERROR"+ "'", var34.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "ERROR"+ "'", var37.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ERROR"+ "'", var43.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ERROR"+ "'", var44.equals("ERROR"));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var8 = var7.getDeclaringClass();
    java.lang.String var9 = var7.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    java.lang.Class var9 = var3.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    boolean var12 = var1.equals((java.lang.Object)"STRING");
    int var13 = var1.ordinal();
    java.lang.Class var14 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    int var11 = var1.ordinal();
    java.lang.Class var12 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.name();
    int var9 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var11.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var19.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var19.equals((java.lang.Object)var23);
    java.lang.Class var25 = var19.getDeclaringClass();
    java.lang.String var26 = var19.toString();
    boolean var27 = var11.equals((java.lang.Object)var19);
    boolean var29 = var11.equals((java.lang.Object)1.0f);
    java.lang.Class var30 = var11.getDeclaringClass();
    boolean var31 = var1.equals((java.lang.Object)var30);
    java.lang.String var32 = var1.toString();
    java.lang.String var33 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "STRING"+ "'", var26.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "STRING"+ "'", var32.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "STRING"+ "'", var33.equals("STRING"));

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var16 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var6.equals((java.lang.Object)var10);
    java.lang.Class var12 = var10.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.String var17 = var16.name();
    boolean var18 = var1.equals((java.lang.Object)var17);
    java.lang.String var19 = var1.name();
    int var20 = var1.ordinal();
    java.lang.String var21 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.name();
    java.lang.String var10 = var4.name();
    java.lang.String var11 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.Class var8 = var7.getDeclaringClass();
    java.lang.String var9 = var7.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    java.lang.String var8 = var5.name();
    boolean var9 = var1.equals((java.lang.Object)var5);
    int var10 = var1.ordinal();
    int var11 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "BLANK");
    java.lang.String var7 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "BLANK"+ "'", var7.equals("BLANK"));

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var18 = var17.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    java.lang.String var16 = var13.name();
    int var17 = var13.ordinal();
    boolean var19 = var13.equals((java.lang.Object)100L);
    boolean var20 = var1.equals((java.lang.Object)var13);
    java.lang.String var21 = var13.toString();
    int var22 = var13.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var10 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var11 = var8.equals((java.lang.Object)var10);
    java.lang.Class var12 = var8.getDeclaringClass();
    java.lang.Class var13 = var8.getDeclaringClass();
    java.lang.String var14 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var8 = var7.name();
    boolean var10 = var7.equals((java.lang.Object)1.0d);
    java.lang.Class var11 = var7.getDeclaringClass();
    boolean var12 = var1.equals((java.lang.Object)var7);
    java.lang.String var13 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "STRING");
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.String var3 = var1.name();
    int var4 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    java.lang.String var10 = var5.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    int var14 = var12.ordinal();
    boolean var15 = var5.equals((java.lang.Object)var12);
    java.lang.Class var16 = var5.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    java.lang.Class var18 = var12.getDeclaringClass();
    java.lang.String var19 = var12.name();
    int var20 = var12.ordinal();
    boolean var21 = var10.equals((java.lang.Object)var12);
    boolean var22 = var3.equals((java.lang.Object)var10);
    java.lang.Class var23 = var10.getDeclaringClass();
    boolean var24 = var1.equals((java.lang.Object)var23);
    java.lang.String var25 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.Class var18 = var1.getDeclaringClass();
    java.lang.String var19 = var1.toString();
    int var20 = var1.ordinal();
    java.lang.Class var21 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Class var12 = var11.getDeclaringClass();
    int var13 = var11.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    java.lang.String var20 = var19.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "BLANK"+ "'", var20.equals("BLANK"));

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    int var18 = var16.ordinal();
    java.lang.String var19 = var16.name();
    int var20 = var16.ordinal();
    int var21 = var16.ordinal();
    java.lang.Class var22 = var16.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    int var27 = var26.ordinal();
    boolean var28 = var9.equals((java.lang.Object)var26);
    int var29 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 5);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Class var11 = var10.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var14 = var13.ordinal();
    boolean var15 = var10.equals((java.lang.Object)var13);
    int var16 = var13.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 3);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Class var10 = var9.getDeclaringClass();
    java.lang.String var11 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.Class var11 = var1.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    int var21 = var19.ordinal();
    boolean var22 = var13.equals((java.lang.Object)var21);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var23 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var24 = var13.equals((java.lang.Object)var23);
    boolean var25 = var9.equals((java.lang.Object)var23);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var31.getDeclaringClass();
    boolean var34 = var9.equals((java.lang.Object)var31);
    int var35 = var9.ordinal();
    java.lang.String var36 = var9.name();
    int var37 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ERROR"+ "'", var36.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "BLANK");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    boolean var8 = var1.equals((java.lang.Object)var7);
    java.lang.String var9 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var8, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var6 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var9 = var8.ordinal();
    java.lang.String var10 = var8.toString();
    java.lang.String var11 = var8.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    boolean var24 = var8.equals((java.lang.Object)var19);
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "STRING");
    boolean var27 = var5.equals((java.lang.Object)var26);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var30 = var29.toString();
    java.lang.Class var31 = var29.getDeclaringClass();
    java.lang.String var32 = var29.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var34 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var35 = var34.name();
    java.lang.String var36 = var34.toString();
    java.lang.Class var37 = var34.getDeclaringClass();
    boolean var38 = var29.equals((java.lang.Object)var34);
    int var39 = var34.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var41 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var43 = var41.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var45 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var46 = var41.equals((java.lang.Object)var45);
    java.lang.Class var47 = var45.getDeclaringClass();
    java.lang.String var48 = var45.name();
    boolean var49 = var34.equals((java.lang.Object)var48);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var51 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var52 = var51.name();
    java.lang.String var53 = var51.toString();
    java.lang.String var54 = var51.name();
    java.lang.Class var55 = var51.getDeclaringClass();
    java.lang.String var56 = var51.name();
    java.lang.Class var57 = var51.getDeclaringClass();
    boolean var58 = var34.equals((java.lang.Object)var57);
    boolean var59 = var26.equals((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ERROR"+ "'", var30.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "ERROR"+ "'", var32.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ERROR"+ "'", var35.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ERROR"+ "'", var36.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "STRING"+ "'", var48.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ERROR"+ "'", var52.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "ERROR"+ "'", var53.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "ERROR"+ "'", var54.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "ERROR"+ "'", var56.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.String var9 = var8.toString();
    java.lang.Class var10 = var8.getDeclaringClass();
    java.lang.String var11 = var8.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    int var22 = var20.ordinal();
    boolean var23 = var14.equals((java.lang.Object)var22);
    java.lang.String var24 = var14.name();
    boolean var26 = var14.equals((java.lang.Object)(short)0);
    boolean var27 = var9.equals((java.lang.Object)(short)0);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var30 = var29.name();
    java.lang.Class var31 = var29.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var35 = var33.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var38 = var33.equals((java.lang.Object)var37);
    boolean var39 = var29.equals((java.lang.Object)var37);
    int var40 = var37.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var42 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var43 = var42.name();
    java.lang.String var44 = var42.name();
    boolean var45 = var37.equals((java.lang.Object)var44);
    boolean var46 = var9.equals((java.lang.Object)var45);
    int var47 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ERROR"+ "'", var30.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ERROR"+ "'", var43.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ERROR"+ "'", var44.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 5);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    int var16 = var14.ordinal();
    java.lang.String var17 = var14.name();
    int var18 = var14.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var20 = var14.equals((java.lang.Object)var19);
    java.lang.Class var21 = var14.getDeclaringClass();
    boolean var22 = var1.equals((java.lang.Object)var14);
    java.lang.String var23 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    int var7 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var15, "ERROR");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var15, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var21.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var21.equals((java.lang.Object)var25);
    java.lang.Class var27 = var21.getDeclaringClass();
    java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "STRING");
    java.lang.Enum var31 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var34 = var33.name();
    java.lang.Class var35 = var33.getDeclaringClass();
    java.lang.Enum var37 = java.lang.Enum.<java.lang.Enum>valueOf(var35, "ERROR");
    java.lang.Class var38 = var37.getDeclaringClass();
    java.lang.Enum var40 = java.lang.Enum.<java.lang.Enum>valueOf(var38, "STRING");
    java.lang.String var41 = var40.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var42 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var43 = var40.equals((java.lang.Object)var42);
    java.lang.Class var44 = var40.getDeclaringClass();
    java.lang.Class var45 = var40.getDeclaringClass();
    boolean var46 = var31.equals((java.lang.Object)var45);
    boolean var47 = var19.equals((java.lang.Object)var45);
    boolean var48 = var1.equals((java.lang.Object)var45);
    java.lang.Class var49 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ERROR"+ "'", var34.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "STRING"+ "'", var41.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var12 = var11.name();
    java.lang.Class var13 = var11.getDeclaringClass();
    java.lang.Class var14 = var11.getDeclaringClass();
    boolean var15 = var9.equals((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    int var22 = var20.ordinal();
    boolean var23 = var14.equals((java.lang.Object)var22);
    java.lang.String var24 = var14.name();
    boolean var26 = var14.equals((java.lang.Object)(short)0);
    boolean var27 = var9.equals((java.lang.Object)(short)0);
    java.lang.String var28 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    java.lang.String var12 = var7.toString();
    java.lang.Class var13 = var7.getDeclaringClass();
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    boolean var19 = var1.equals((java.lang.Object)var18);
    java.lang.Class var20 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    java.lang.Class var18 = var1.getDeclaringClass();
    java.lang.String var19 = var1.toString();
    int var20 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var23 = var22.ordinal();
    java.lang.String var24 = var22.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var28 = var26.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var30 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var31 = var26.equals((java.lang.Object)var30);
    java.lang.Class var32 = var30.getDeclaringClass();
    java.lang.Enum var34 = java.lang.Enum.<java.lang.Enum>valueOf(var32, "ERROR");
    boolean var36 = var34.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var38 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var40 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var42 = var40.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var44 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var45 = var40.equals((java.lang.Object)var44);
    int var46 = var44.ordinal();
    boolean var47 = var38.equals((java.lang.Object)var46);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var48 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var49 = var38.equals((java.lang.Object)var48);
    boolean var50 = var34.equals((java.lang.Object)var48);
    boolean var51 = var22.equals((java.lang.Object)var34);
    boolean var52 = var1.equals((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    int var11 = var6.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var17.getDeclaringClass();
    java.lang.String var20 = var17.name();
    boolean var21 = var6.equals((java.lang.Object)var20);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var24 = var23.name();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.name();
    java.lang.Class var27 = var23.getDeclaringClass();
    java.lang.String var28 = var23.name();
    java.lang.Class var29 = var23.getDeclaringClass();
    boolean var30 = var6.equals((java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var32 = java.lang.Enum.<java.lang.Enum>valueOf(var29, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ERROR"+ "'", var26.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ERROR"+ "'", var28.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var8 = var7.toString();
    int var9 = var7.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var12 = var11.getDeclaringClass();
    boolean var14 = var11.equals((java.lang.Object)0.0d);
    int var15 = var11.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.String var11 = var1.name();
    java.lang.String var12 = var1.name();
    java.lang.String var13 = var1.name();
    java.lang.Class var14 = var1.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var17.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    java.lang.String var22 = var21.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var25 = var24.name();
    boolean var27 = var24.equals((java.lang.Object)1.0d);
    java.lang.Class var28 = var24.getDeclaringClass();
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "STRING");
    boolean var31 = var21.equals((java.lang.Object)var30);
    boolean var32 = var11.equals((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    java.lang.Class var14 = var12.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "ERROR");
    java.lang.Class var17 = var16.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.String var20 = var19.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var21 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var22 = var19.equals((java.lang.Object)var21);
    boolean var23 = var9.equals((java.lang.Object)var22);
    java.lang.String var24 = var9.toString();
    java.lang.Class var25 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "STRING"+ "'", var24.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.String var8 = var7.toString();
    int var9 = var7.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.Class var6 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var2 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.name();
    java.lang.String var10 = var8.toString();
    java.lang.Class var11 = var8.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    boolean var14 = var1.equals((java.lang.Object)var13);
    java.lang.String var15 = var13.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    java.lang.String var10 = var5.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    int var14 = var12.ordinal();
    boolean var15 = var5.equals((java.lang.Object)var12);
    int var16 = var5.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    int var17 = var7.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var19.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var19.equals((java.lang.Object)var23);
    java.lang.Class var25 = var19.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var27.getDeclaringClass();
    java.lang.String var34 = var27.toString();
    boolean var35 = var19.equals((java.lang.Object)var27);
    java.lang.Class var36 = var19.getDeclaringClass();
    java.lang.String var37 = var19.toString();
    int var38 = var19.ordinal();
    boolean var39 = var7.equals((java.lang.Object)var19);
    java.lang.String var40 = var19.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "STRING"+ "'", var37.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "STRING"+ "'", var40.equals("STRING"));

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.Class var11 = var5.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "BLANK");
    java.lang.String var18 = var17.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "BLANK"+ "'", var18.equals("BLANK"));

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var0 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var1 = var0.isMacroDetected();
    boolean var2 = var0.isMacroDetected();
    boolean var3 = var0.isMacroDetected();
    boolean var4 = var0.isMacroDetected();
    boolean var5 = var0.isMacroDetected();
    boolean var6 = var0.isMacroDetected();
    boolean var7 = var0.isMacroDetected();
    boolean var8 = var0.isMacroDetected();
    boolean var9 = var0.isMacroDetected();
    boolean var10 = var0.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var13 = var12.name();
    boolean var15 = var12.equals((java.lang.Object)1.0d);
    java.lang.Class var16 = var12.getDeclaringClass();
    java.lang.Enum var18 = java.lang.Enum.<java.lang.Enum>valueOf(var16, "STRING");
    boolean var19 = var9.equals((java.lang.Object)var18);
    int var20 = var9.ordinal();
    int var21 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.name();
    java.lang.String var10 = var1.name();
    java.lang.String var11 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("BLANK");
    boolean var16 = var13.equals((java.lang.Object)var15);
    java.lang.Class var17 = var13.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    int var21 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var24 = var23.name();
    java.lang.String var25 = var23.toString();
    boolean var27 = var23.equals((java.lang.Object)(byte)100);
    boolean var29 = var23.equals((java.lang.Object)(short)1);
    java.lang.String var30 = var23.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var34 = var32.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var36 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var37 = var32.equals((java.lang.Object)var36);
    java.lang.Class var38 = var32.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var40 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var42 = var40.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var44 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var45 = var40.equals((java.lang.Object)var44);
    java.lang.Class var46 = var40.getDeclaringClass();
    java.lang.String var47 = var40.toString();
    boolean var48 = var32.equals((java.lang.Object)var40);
    java.lang.String var49 = var40.name();
    boolean var50 = var23.equals((java.lang.Object)var40);
    boolean var51 = var5.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ERROR"+ "'", var30.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "STRING"+ "'", var47.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "STRING"+ "'", var49.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var13 = var11.equals((java.lang.Object)10);
    java.lang.String var14 = var11.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    java.lang.Class var19 = var16.getDeclaringClass();
    java.lang.String var20 = var16.name();
    java.lang.String var21 = var16.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var24 = var23.name();
    java.lang.String var25 = var23.toString();
    java.lang.Class var26 = var23.getDeclaringClass();
    java.lang.Enum var28 = java.lang.Enum.<java.lang.Enum>valueOf(var26, "ERROR");
    boolean var29 = var16.equals((java.lang.Object)var28);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var35 = var33.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var38 = var33.equals((java.lang.Object)var37);
    int var39 = var37.ordinal();
    boolean var40 = var31.equals((java.lang.Object)var39);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var41 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var42 = var31.equals((java.lang.Object)var41);
    boolean var43 = var41.isMacroDetected();
    boolean var44 = var41.isMacroDetected();
    boolean var45 = var41.isMacroDetected();
    boolean var46 = var41.isMacroDetected();
    boolean var47 = var41.isMacroDetected();
    boolean var48 = var28.equals((java.lang.Object)var41);
    boolean var49 = var41.isMacroDetected();
    boolean var50 = var41.isMacroDetected();
    boolean var51 = var41.isMacroDetected();
    boolean var52 = var11.equals((java.lang.Object)var41);
    boolean var53 = var41.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)(short)100);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var13 = var12.getDeclaringClass();
    java.lang.String var14 = var12.name();
    boolean var15 = var5.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    boolean var7 = var1.equals((java.lang.Object)(short)1);
    java.lang.String var8 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    java.lang.Class var16 = var10.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var18.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var18.equals((java.lang.Object)var22);
    java.lang.Class var24 = var18.getDeclaringClass();
    java.lang.String var25 = var18.toString();
    boolean var26 = var10.equals((java.lang.Object)var18);
    java.lang.String var27 = var18.name();
    boolean var28 = var1.equals((java.lang.Object)var18);
    java.lang.String var29 = var18.name();
    java.lang.String var30 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "STRING"+ "'", var27.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "STRING"+ "'", var29.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "STRING"+ "'", var30.equals("STRING"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var12 = var11.name();
    int var13 = var11.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var4.equals((java.lang.Object)var8);
    int var10 = var8.ordinal();
    java.lang.String var11 = var8.name();
    boolean var12 = var1.equals((java.lang.Object)var8);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    java.lang.Class var22 = var16.getDeclaringClass();
    java.lang.String var23 = var16.name();
    int var24 = var16.ordinal();
    boolean var25 = var14.equals((java.lang.Object)var16);
    boolean var26 = var8.equals((java.lang.Object)var25);
    int var27 = var8.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 5);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    java.lang.Class var13 = var10.getDeclaringClass();
    java.lang.String var14 = var10.name();
    java.lang.Class var15 = var10.getDeclaringClass();
    boolean var16 = var5.equals((java.lang.Object)var10);
    java.lang.String var17 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    int var18 = var16.ordinal();
    java.lang.String var19 = var16.name();
    int var20 = var16.ordinal();
    int var21 = var16.ordinal();
    java.lang.Class var22 = var16.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    int var27 = var26.ordinal();
    boolean var28 = var9.equals((java.lang.Object)var26);
    java.lang.String var29 = var26.toString();
    java.lang.String var30 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ERROR"+ "'", var29.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ERROR"+ "'", var30.equals("ERROR"));

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)(short)100);
    int var11 = var5.ordinal();
    int var12 = var5.ordinal();
    int var13 = var5.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    int var12 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    java.lang.String var12 = var7.toString();
    java.lang.Class var13 = var7.getDeclaringClass();
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    boolean var19 = var1.equals((java.lang.Object)var18);
    java.lang.String var20 = var1.name();
    java.lang.String var21 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    java.lang.Class var16 = var10.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var18.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var18.equals((java.lang.Object)var22);
    java.lang.Class var24 = var18.getDeclaringClass();
    java.lang.String var25 = var18.toString();
    boolean var26 = var10.equals((java.lang.Object)var18);
    boolean var27 = var1.equals((java.lang.Object)var26);
    java.lang.String var28 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Class var6 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    java.lang.Class var11 = var5.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.String var20 = var13.toString();
    boolean var21 = var5.equals((java.lang.Object)var13);
    boolean var22 = var1.equals((java.lang.Object)var13);
    java.lang.Class var23 = var13.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.name();
    boolean var17 = var9.equals((java.lang.Object)var16);
    int var18 = var9.ordinal();
    java.lang.String var19 = var9.name();
    int var20 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var1.toString();
    java.lang.String var12 = var1.toString();
    java.lang.Class var13 = var1.getDeclaringClass();
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    java.lang.String var11 = var1.name();
    boolean var13 = var1.equals((java.lang.Object)(short)0);
    java.lang.String var14 = var1.toString();
    java.lang.String var15 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var12 = var11.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var15 = var14.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var16 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var17 = var14.equals((java.lang.Object)var16);
    java.lang.String var18 = var14.name();
    boolean var19 = var11.equals((java.lang.Object)var18);
    java.lang.String var20 = var11.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.toString();
    int var6 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var10 = var9.name();
    java.lang.Class var11 = var9.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Class var14 = var13.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "STRING");
    java.lang.String var17 = var16.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var18 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var19 = var16.equals((java.lang.Object)var18);
    java.lang.Class var20 = var16.getDeclaringClass();
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "STRING");
    java.lang.String var23 = var22.toString();
    int var24 = var22.ordinal();
    boolean var25 = var1.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.String var5 = var1.toString();
    int var6 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var14 = var13.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    int var13 = var7.ordinal();
    java.lang.String var14 = var7.name();
    boolean var15 = var1.equals((java.lang.Object)var7);
    java.lang.String var16 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    boolean var7 = var1.equals((java.lang.Object)(short)1);
    int var8 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var11 = var10.name();
    boolean var13 = var10.equals((java.lang.Object)1.0d);
    java.lang.Class var14 = var10.getDeclaringClass();
    boolean var15 = var1.equals((java.lang.Object)var10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var18 = var17.name();
    java.lang.Class var19 = var17.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    java.lang.Class var22 = var21.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "STRING");
    int var25 = var24.ordinal();
    boolean var26 = var10.equals((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.name();
    boolean var17 = var9.equals((java.lang.Object)var16);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var20 = var19.toString();
    int var21 = var19.ordinal();
    java.lang.Class var22 = var19.getDeclaringClass();
    int var23 = var19.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var27 = var25.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var30 = var25.equals((java.lang.Object)var29);
    java.lang.Class var31 = var25.getDeclaringClass();
    java.lang.String var32 = var25.toString();
    int var33 = var25.ordinal();
    boolean var34 = var19.equals((java.lang.Object)var25);
    int var35 = var25.ordinal();
    java.lang.Class var36 = var25.getDeclaringClass();
    boolean var37 = var9.equals((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "STRING"+ "'", var32.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.String var3 = var1.name();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    int var13 = var5.ordinal();
    java.lang.String var14 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var10 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var11 = var8.equals((java.lang.Object)var10);
    java.lang.String var12 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var14.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var14.equals((java.lang.Object)var18);
    java.lang.Class var20 = var18.getDeclaringClass();
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var28 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "STRING");
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "STRING");
    boolean var31 = var8.equals((java.lang.Object)var20);
    int var32 = var8.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 5);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    boolean var8 = var1.equals((java.lang.Object)true);
    java.lang.String var9 = var1.name();
    int var10 = var1.ordinal();
    int var11 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.Class var8 = var5.getDeclaringClass();
    int var9 = var5.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    int var8 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    boolean var16 = var7.equals((java.lang.Object)var15);
    java.lang.String var17 = var7.name();
    java.lang.String var18 = var7.name();
    boolean var19 = var1.equals((java.lang.Object)var7);
    java.lang.String var20 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    int var8 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var9.name();
    java.lang.String var21 = var9.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.Class var9 = var4.getDeclaringClass();
    java.lang.String var10 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    java.lang.String var16 = var13.name();
    int var17 = var13.ordinal();
    boolean var19 = var13.equals((java.lang.Object)100L);
    boolean var20 = var1.equals((java.lang.Object)var13);
    java.lang.String var21 = var13.toString();
    java.lang.String var22 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.name();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    java.lang.String var18 = var17.toString();
    int var19 = var17.ordinal();
    boolean var20 = var1.equals((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.name();
    java.lang.Class var10 = var4.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "STRING");
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "ERROR");
    int var15 = var14.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    boolean var7 = var1.equals((java.lang.Object)(short)1);
    int var8 = var1.ordinal();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var10 = var9.name();
    java.lang.String var11 = var9.toString();
    boolean var13 = var9.equals((java.lang.Object)(byte)100);
    java.lang.String var14 = var9.toString();
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.name();
    boolean var17 = var1.equals((java.lang.Object)var16);
    java.lang.String var18 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "STRING"+ "'", var18.equals("STRING"));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    int var20 = var15.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    java.lang.String var16 = var13.name();
    int var17 = var13.ordinal();
    boolean var19 = var13.equals((java.lang.Object)100L);
    boolean var20 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var23 = var22.name();
    java.lang.Class var24 = var22.getDeclaringClass();
    java.lang.String var25 = var22.name();
    java.lang.Class var26 = var22.getDeclaringClass();
    java.lang.Class var27 = var22.getDeclaringClass();
    boolean var28 = var1.equals((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "ERROR"+ "'", var23.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    java.lang.Class var6 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.Class var20 = var15.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Class var7 = var5.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    int var6 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    int var15 = var13.ordinal();
    boolean var16 = var7.equals((java.lang.Object)var15);
    java.lang.String var17 = var7.name();
    java.lang.String var18 = var7.name();
    boolean var19 = var1.equals((java.lang.Object)var7);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var21.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var21.equals((java.lang.Object)var25);
    java.lang.Class var27 = var21.getDeclaringClass();
    java.lang.String var28 = var21.toString();
    int var29 = var21.ordinal();
    boolean var30 = var7.equals((java.lang.Object)var29);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var34 = var32.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var36 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var37 = var32.equals((java.lang.Object)var36);
    java.lang.String var38 = var36.toString();
    java.lang.Class var39 = var36.getDeclaringClass();
    boolean var40 = var7.equals((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "STRING"+ "'", var38.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var11 = var10.getDeclaringClass();
    java.lang.Class var12 = var10.getDeclaringClass();
    boolean var13 = var6.equals((java.lang.Object)var10);
    java.lang.String var14 = var6.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    java.lang.Class var22 = var16.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var24.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var28 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var24.equals((java.lang.Object)var28);
    java.lang.Class var30 = var24.getDeclaringClass();
    java.lang.String var31 = var24.toString();
    boolean var32 = var16.equals((java.lang.Object)var24);
    boolean var34 = var16.equals((java.lang.Object)1.0f);
    java.lang.Class var35 = var16.getDeclaringClass();
    int var36 = var16.ordinal();
    boolean var37 = var6.equals((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "STRING"+ "'", var31.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    int var5 = var1.ordinal();
    int var6 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var9 = var8.ordinal();
    java.lang.String var10 = var8.name();
    java.lang.Class var11 = var8.getDeclaringClass();
    boolean var12 = var1.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    boolean var10 = var1.equals((java.lang.Object)var9);
    int var11 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var6 = var5.toString();
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.name();
    boolean var11 = var1.equals((java.lang.Object)var10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.String var19 = var13.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var21.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var21.equals((java.lang.Object)var25);
    int var27 = var25.ordinal();
    java.lang.String var28 = var25.name();
    int var29 = var25.ordinal();
    boolean var31 = var25.equals((java.lang.Object)100L);
    boolean var32 = var13.equals((java.lang.Object)var25);
    java.lang.String var33 = var25.toString();
    boolean var34 = var1.equals((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "STRING"+ "'", var33.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    java.lang.Class var16 = var10.getDeclaringClass();
    java.lang.String var17 = var10.name();
    int var18 = var10.ordinal();
    boolean var19 = var8.equals((java.lang.Object)var10);
    boolean var20 = var1.equals((java.lang.Object)var8);
    java.lang.Class var21 = var8.getDeclaringClass();
    int var22 = var8.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    java.lang.String var7 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var10 = var9.toString();
    java.lang.Class var11 = var9.getDeclaringClass();
    java.lang.String var12 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.toString();
    java.lang.Class var17 = var14.getDeclaringClass();
    boolean var18 = var9.equals((java.lang.Object)var14);
    int var19 = var14.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var21.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var21.equals((java.lang.Object)var25);
    java.lang.Class var27 = var25.getDeclaringClass();
    java.lang.String var28 = var25.name();
    boolean var29 = var14.equals((java.lang.Object)var28);
    boolean var30 = var1.equals((java.lang.Object)var14);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var34 = var32.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var36 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var37 = var32.equals((java.lang.Object)var36);
    int var38 = var36.ordinal();
    java.lang.String var39 = var36.name();
    int var40 = var36.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var42 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var44 = var42.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var46 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var47 = var42.equals((java.lang.Object)var46);
    java.lang.Class var48 = var46.getDeclaringClass();
    java.lang.Enum var50 = java.lang.Enum.<java.lang.Enum>valueOf(var48, "ERROR");
    boolean var51 = var36.equals((java.lang.Object)var48);
    java.lang.Enum var53 = java.lang.Enum.<java.lang.Enum>valueOf(var48, "BLANK");
    boolean var54 = var1.equals((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "STRING"+ "'", var28.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "STRING"+ "'", var39.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.name();
    java.lang.Class var9 = var5.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    java.lang.Class var17 = var1.getDeclaringClass();
    java.lang.Class var18 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var20 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    java.lang.String var12 = var9.name();
    java.lang.Class var13 = var9.getDeclaringClass();
    int var14 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.Class var5 = var1.getDeclaringClass();
    int var6 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var9 = var8.toString();
    int var10 = var8.ordinal();
    java.lang.Class var11 = var8.getDeclaringClass();
    int var12 = var8.ordinal();
    boolean var13 = var1.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    int var8 = var7.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    java.lang.String var17 = var1.toString();
    java.lang.String var18 = var1.toString();
    java.lang.String var19 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    java.lang.String var12 = var9.name();
    java.lang.String var13 = var9.name();
    int var14 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var13.getDeclaringClass();
    java.lang.String var16 = var13.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var18.equals((java.lang.Object)(byte)10);
    java.lang.Class var21 = var18.getDeclaringClass();
    java.lang.String var22 = var18.name();
    java.lang.Class var23 = var18.getDeclaringClass();
    boolean var24 = var13.equals((java.lang.Object)var18);
    java.lang.String var25 = var18.name();
    boolean var26 = var1.equals((java.lang.Object)var25);
    java.lang.String var27 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "STRING"+ "'", var27.equals("STRING"));

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var12 = var11.toString();
    java.lang.Class var13 = var11.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    int var23 = var22.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 6);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    int var12 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.name();
    boolean var17 = var9.equals((java.lang.Object)var16);
    java.lang.Class var18 = var9.getDeclaringClass();
    int var19 = var9.ordinal();
    int var20 = var9.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Class var10 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    int var4 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var1.toString();
    java.lang.String var12 = var1.name();
    int var13 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.String var8 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    java.lang.Class var14 = var9.getDeclaringClass();
    java.lang.String var15 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.name();
    java.lang.Class var10 = var4.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "STRING");
    java.lang.String var13 = var12.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    java.lang.Class var2 = var1.getDeclaringClass();
    int var3 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 5);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var15.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var23 = var22.getDeclaringClass();
    java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var23, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var28 = var27.name();
    boolean var30 = var27.equals((java.lang.Object)1.0d);
    java.lang.String var31 = var27.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var33 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    boolean var34 = var27.equals((java.lang.Object)var33);
    boolean var35 = var25.equals((java.lang.Object)var33);
    boolean var36 = var15.equals((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ERROR"+ "'", var28.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "ERROR"+ "'", var31.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var10 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var11 = var8.equals((java.lang.Object)var10);
    java.lang.String var12 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    java.lang.Class var22 = var16.getDeclaringClass();
    java.lang.String var23 = var16.name();
    int var24 = var16.ordinal();
    boolean var25 = var14.equals((java.lang.Object)var16);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    int var33 = var31.ordinal();
    java.lang.String var34 = var31.name();
    int var35 = var31.ordinal();
    boolean var37 = var31.equals((java.lang.Object)100L);
    boolean var38 = var14.equals((java.lang.Object)var31);
    boolean var39 = var8.equals((java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    java.lang.Class var14 = var12.getDeclaringClass();
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var14, "ERROR");
    java.lang.Class var17 = var16.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.String var20 = var19.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var21 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var22 = var19.equals((java.lang.Object)var21);
    boolean var23 = var9.equals((java.lang.Object)var22);
    java.lang.String var24 = var9.toString();
    java.lang.String var25 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "STRING"+ "'", var24.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "STRING"+ "'", var25.equals("STRING"));

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.String var8 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    java.lang.Class var13 = var10.getDeclaringClass();
    java.lang.String var14 = var10.name();
    java.lang.Class var15 = var10.getDeclaringClass();
    boolean var16 = var5.equals((java.lang.Object)var10);
    int var17 = var10.ordinal();
    int var18 = var10.ordinal();
    java.lang.String var19 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    java.lang.String var2 = var1.name();
    int var3 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 5);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    int var7 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var8 = var7.name();
    int var9 = var7.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var7.getDeclaringClass();
    java.lang.String var14 = var7.toString();
    int var15 = var7.ordinal();
    boolean var16 = var1.equals((java.lang.Object)var7);
    int var17 = var7.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var19.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var23 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var19.equals((java.lang.Object)var23);
    java.lang.Class var25 = var19.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var27.getDeclaringClass();
    java.lang.String var34 = var27.toString();
    boolean var35 = var19.equals((java.lang.Object)var27);
    java.lang.Class var36 = var19.getDeclaringClass();
    java.lang.String var37 = var19.toString();
    int var38 = var19.ordinal();
    boolean var39 = var7.equals((java.lang.Object)var19);
    java.lang.Class var40 = var19.getDeclaringClass();
    java.lang.Class var41 = var19.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "STRING"+ "'", var37.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    java.lang.String var13 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    int var13 = var5.ordinal();
    java.lang.String var14 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "STRING"+ "'", var14.equals("STRING"));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "STRING");
    int var5 = var4.ordinal();
    int var6 = var4.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)true);
    java.lang.String var11 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "STRING");
    java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    boolean var26 = var5.equals((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "STRING");
    java.lang.Class var8 = var7.getDeclaringClass();
    java.lang.String var9 = var7.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var12 = var11.name();
    java.lang.Class var13 = var11.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    boolean var21 = var11.equals((java.lang.Object)var19);
    java.lang.Class var22 = var19.getDeclaringClass();
    boolean var23 = var7.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.String var8 = var6.toString();
    java.lang.Class var9 = var6.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var6);
    java.lang.String var11 = var6.name();
    java.lang.String var12 = var6.toString();
    java.lang.Class var13 = var6.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var10 = var9.name();
    java.lang.String var11 = var9.toString();
    boolean var13 = var9.equals((java.lang.Object)(byte)100);
    java.lang.String var14 = var9.toString();
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.name();
    boolean var17 = var1.equals((java.lang.Object)var16);
    java.lang.String var18 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "STRING"+ "'", var18.equals("STRING"));

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "BLANK");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.String var25 = var24.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.String var9 = var8.toString();
    java.lang.Class var10 = var8.getDeclaringClass();
    java.lang.String var11 = var8.toString();
    int var12 = var8.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.name();
    java.lang.String var10 = var8.toString();
    boolean var12 = var8.equals((java.lang.Object)(byte)100);
    boolean var14 = var8.equals((java.lang.Object)(short)1);
    java.lang.String var15 = var8.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var17.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var17.equals((java.lang.Object)var21);
    java.lang.Class var23 = var17.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var27 = var25.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var30 = var25.equals((java.lang.Object)var29);
    java.lang.Class var31 = var25.getDeclaringClass();
    java.lang.String var32 = var25.toString();
    boolean var33 = var17.equals((java.lang.Object)var25);
    java.lang.String var34 = var25.name();
    boolean var35 = var8.equals((java.lang.Object)var25);
    boolean var36 = var6.equals((java.lang.Object)var8);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var38 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var39 = var38.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var41 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var43 = var41.equals((java.lang.Object)(byte)10);
    boolean var44 = var38.equals((java.lang.Object)var41);
    java.lang.String var45 = var41.toString();
    java.lang.String var46 = var41.name();
    java.lang.Class var47 = var41.getDeclaringClass();
    boolean var48 = var6.equals((java.lang.Object)var47);
    java.lang.Enum var50 = java.lang.Enum.<java.lang.Enum>valueOf(var47, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "STRING"+ "'", var32.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "ERROR"+ "'", var39.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "STRING"+ "'", var45.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "STRING"+ "'", var46.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.Class var20 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.name();
    java.lang.String var10 = var8.toString();
    boolean var12 = var8.equals((java.lang.Object)(byte)100);
    boolean var14 = var8.equals((java.lang.Object)(short)1);
    java.lang.String var15 = var8.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var17.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var17.equals((java.lang.Object)var21);
    java.lang.Class var23 = var17.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var27 = var25.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var29 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var30 = var25.equals((java.lang.Object)var29);
    java.lang.Class var31 = var25.getDeclaringClass();
    java.lang.String var32 = var25.toString();
    boolean var33 = var17.equals((java.lang.Object)var25);
    java.lang.String var34 = var25.name();
    boolean var35 = var8.equals((java.lang.Object)var25);
    boolean var36 = var6.equals((java.lang.Object)var8);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var38 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var40 = var38.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var42 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var43 = var38.equals((java.lang.Object)var42);
    java.lang.Class var44 = var38.getDeclaringClass();
    java.lang.Enum var46 = java.lang.Enum.<java.lang.Enum>valueOf(var44, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var48 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var49 = var48.name();
    java.lang.Class var50 = var48.getDeclaringClass();
    java.lang.Class var51 = var48.getDeclaringClass();
    boolean var52 = var46.equals((java.lang.Object)var51);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var54 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var55 = var54.name();
    java.lang.Class var56 = var54.getDeclaringClass();
    java.lang.Enum var58 = java.lang.Enum.<java.lang.Enum>valueOf(var56, "ERROR");
    java.lang.Class var59 = var58.getDeclaringClass();
    java.lang.Enum var61 = java.lang.Enum.<java.lang.Enum>valueOf(var59, "ERROR");
    java.lang.Enum var63 = java.lang.Enum.<java.lang.Enum>valueOf(var59, "ERROR");
    java.lang.Class var64 = var63.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var66 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var67 = var66.ordinal();
    boolean var68 = var63.equals((java.lang.Object)var66);
    boolean var69 = var46.equals((java.lang.Object)var68);
    boolean var70 = var8.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "STRING"+ "'", var32.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "ERROR"+ "'", var49.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "ERROR"+ "'", var55.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "BLANK");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("BLANK");
    boolean var16 = var13.equals((java.lang.Object)var15);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var18.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var18.equals((java.lang.Object)var22);
    java.lang.Class var24 = var22.getDeclaringClass();
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "ERROR");
    java.lang.Enum var28 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "STRING");
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "STRING");
    boolean var31 = var13.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var1.equals((java.lang.Object)var13);
    java.lang.String var15 = var1.name();
    java.lang.String var16 = var1.name();
    java.lang.Class var17 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var12 = var11.name();
    java.lang.String var13 = var11.toString();
    java.lang.Class var14 = var11.getDeclaringClass();
    int var15 = var11.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var18 = var17.name();
    java.lang.String var19 = var17.toString();
    boolean var21 = var17.equals((java.lang.Object)(byte)100);
    java.lang.String var22 = var17.toString();
    java.lang.Class var23 = var17.getDeclaringClass();
    boolean var24 = var11.equals((java.lang.Object)var23);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var27 = var26.name();
    java.lang.Class var28 = var26.getDeclaringClass();
    boolean var29 = var11.equals((java.lang.Object)var28);
    boolean var30 = var1.equals((java.lang.Object)var29);
    java.lang.Class var31 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    int var4 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    boolean var16 = var6.equals((java.lang.Object)var14);
    int var17 = var14.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var20 = var19.name();
    java.lang.String var21 = var19.name();
    boolean var22 = var14.equals((java.lang.Object)var21);
    boolean var23 = var1.equals((java.lang.Object)var21);
    java.lang.Class var24 = var1.getDeclaringClass();
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ERROR"+ "'", var21.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.Class var8 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var8, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    java.lang.String var10 = var5.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    int var14 = var12.ordinal();
    boolean var15 = var5.equals((java.lang.Object)var12);
    java.lang.Class var16 = var12.getDeclaringClass();
    java.lang.String var17 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "STRING");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var26 = var25.name();
    java.lang.Class var27 = var25.getDeclaringClass();
    java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "ERROR");
    java.lang.Class var30 = var29.getDeclaringClass();
    java.lang.Enum var32 = java.lang.Enum.<java.lang.Enum>valueOf(var30, "STRING");
    java.lang.String var33 = var32.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var34 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var35 = var32.equals((java.lang.Object)var34);
    java.lang.Class var36 = var32.getDeclaringClass();
    java.lang.Class var37 = var32.getDeclaringClass();
    boolean var38 = var23.equals((java.lang.Object)var37);
    boolean var39 = var11.equals((java.lang.Object)var37);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var41 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var43 = var41.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var45 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var46 = var41.equals((java.lang.Object)var45);
    java.lang.Class var47 = var41.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var49 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var51 = var49.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var53 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var54 = var49.equals((java.lang.Object)var53);
    java.lang.Class var55 = var49.getDeclaringClass();
    java.lang.String var56 = var49.toString();
    boolean var57 = var41.equals((java.lang.Object)var49);
    boolean var59 = var41.equals((java.lang.Object)1.0f);
    java.lang.Class var60 = var41.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var62 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var63 = var62.name();
    java.lang.Class var64 = var62.getDeclaringClass();
    boolean var65 = var41.equals((java.lang.Object)var62);
    int var66 = var41.ordinal();
    java.lang.Class var67 = var41.getDeclaringClass();
    boolean var68 = var11.equals((java.lang.Object)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var70 = java.lang.Enum.<java.lang.Enum>valueOf(var67, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ERROR"+ "'", var26.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "STRING"+ "'", var33.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "STRING"+ "'", var56.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "ERROR"+ "'", var63.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    java.lang.Class var11 = var5.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Class var14 = var13.getDeclaringClass();
    boolean var15 = var1.equals((java.lang.Object)var13);
    java.lang.Class var16 = var13.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "BLANK");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.toString();
    java.lang.Class var10 = var8.getDeclaringClass();
    java.lang.String var11 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    java.lang.String var15 = var13.toString();
    java.lang.Class var16 = var13.getDeclaringClass();
    boolean var17 = var8.equals((java.lang.Object)var13);
    int var18 = var13.ordinal();
    boolean var19 = var5.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var22 = var21.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var24.equals((java.lang.Object)(byte)10);
    boolean var27 = var21.equals((java.lang.Object)var24);
    java.lang.Class var28 = var21.getDeclaringClass();
    boolean var29 = var5.equals((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    int var18 = var16.ordinal();
    java.lang.String var19 = var16.name();
    int var20 = var16.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var24 = var22.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var27 = var22.equals((java.lang.Object)var26);
    java.lang.Class var28 = var26.getDeclaringClass();
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "ERROR");
    boolean var31 = var16.equals((java.lang.Object)var28);
    java.lang.Enum var33 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "ERROR");
    int var34 = var33.ordinal();
    boolean var35 = var10.equals((java.lang.Object)var34);
    java.lang.String var36 = var10.name();
    java.lang.Class var37 = var10.getDeclaringClass();
    java.lang.Class var38 = var10.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ERROR"+ "'", var36.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var1.equals((java.lang.Object)var13);
    java.lang.String var15 = var1.name();
    java.lang.String var16 = var1.name();
    int var17 = var1.ordinal();
    int var18 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    java.lang.String var21 = var1.name();
    java.lang.String var22 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var24.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var28 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var24.equals((java.lang.Object)var28);
    int var30 = var28.ordinal();
    java.lang.String var31 = var28.name();
    int var32 = var28.ordinal();
    int var33 = var28.ordinal();
    java.lang.Class var34 = var28.getDeclaringClass();
    java.lang.Enum var36 = java.lang.Enum.<java.lang.Enum>valueOf(var34, "ERROR");
    boolean var37 = var1.equals((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "STRING"+ "'", var31.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var9 = var8.ordinal();
    java.lang.String var10 = var8.toString();
    int var11 = var8.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    java.lang.Class var15 = var13.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var17.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var17.equals((java.lang.Object)var21);
    boolean var23 = var13.equals((java.lang.Object)var21);
    int var24 = var21.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var27 = var26.name();
    java.lang.String var28 = var26.name();
    boolean var29 = var21.equals((java.lang.Object)var28);
    boolean var30 = var8.equals((java.lang.Object)var28);
    boolean var31 = var6.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ERROR"+ "'", var28.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    int var25 = var24.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Class var10 = var9.getDeclaringClass();
    java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "STRING");
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "STRING");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    int var18 = var9.ordinal();
    java.lang.String var19 = var9.toString();
    java.lang.String var20 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "STRING"+ "'", var20.equals("STRING"));

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    int var21 = var19.ordinal();
    boolean var22 = var13.equals((java.lang.Object)var21);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var23 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var24 = var13.equals((java.lang.Object)var23);
    boolean var25 = var9.equals((java.lang.Object)var23);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var27 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var27.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var31 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var27.equals((java.lang.Object)var31);
    java.lang.Class var33 = var31.getDeclaringClass();
    boolean var34 = var9.equals((java.lang.Object)var31);
    int var35 = var9.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var37 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var39 = var37.equals((java.lang.Object)(byte)10);
    java.lang.Class var40 = var37.getDeclaringClass();
    boolean var41 = var9.equals((java.lang.Object)var40);
    java.lang.Enum var43 = java.lang.Enum.<java.lang.Enum>valueOf(var40, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    java.lang.Class var9 = var3.getDeclaringClass();
    int var10 = var3.ordinal();
    java.lang.Class var11 = var3.getDeclaringClass();
    java.lang.String var12 = var3.name();
    boolean var13 = var1.equals((java.lang.Object)var12);
    java.lang.Class var14 = var1.getDeclaringClass();
    java.lang.String var15 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "STRING"+ "'", var15.equals("STRING"));

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var6.equals((java.lang.Object)var10);
    int var12 = var6.ordinal();
    java.lang.String var13 = var6.name();
    boolean var14 = var1.equals((java.lang.Object)var6);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    java.lang.Enum var20 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "ERROR");
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "STRING");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "ERROR");
    boolean var25 = var6.equals((java.lang.Object)"ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "STRING"+ "'", var13.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    boolean var9 = var5.equals((java.lang.Object)(byte)100);
    java.lang.String var10 = var5.toString();
    java.lang.Class var11 = var5.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var16.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var16.equals((java.lang.Object)var20);
    int var22 = var20.ordinal();
    boolean var23 = var13.equals((java.lang.Object)var20);
    java.lang.Class var24 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var24, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.String var12 = var11.toString();
    int var13 = var11.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(1);
    java.lang.String var2 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    java.lang.Class var16 = var10.getDeclaringClass();
    java.lang.String var17 = var10.name();
    int var18 = var10.ordinal();
    boolean var19 = var8.equals((java.lang.Object)var10);
    boolean var20 = var1.equals((java.lang.Object)var8);
    int var21 = var8.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var3 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var5 = var3.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var3.equals((java.lang.Object)var7);
    int var9 = var7.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var9);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var11 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var12 = var1.equals((java.lang.Object)var11);
    boolean var13 = var11.isMacroDetected();
    boolean var14 = var11.isMacroDetected();
    boolean var15 = var11.isMacroDetected();
    boolean var16 = var11.isMacroDetected();
    boolean var17 = var11.isMacroDetected();
    boolean var18 = var11.isMacroDetected();
    boolean var19 = var11.isMacroDetected();
    boolean var20 = var11.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var1.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    java.lang.Class var16 = var10.getDeclaringClass();
    java.lang.String var17 = var10.name();
    int var18 = var10.ordinal();
    boolean var19 = var8.equals((java.lang.Object)var10);
    boolean var20 = var1.equals((java.lang.Object)var8);
    java.lang.String var21 = var1.toString();
    java.lang.String var22 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    java.lang.String var21 = var1.name();
    java.lang.String var22 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var24.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var28 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var24.equals((java.lang.Object)var28);
    java.lang.Class var30 = var24.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var32 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var34 = var32.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var36 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var37 = var32.equals((java.lang.Object)var36);
    java.lang.Class var38 = var32.getDeclaringClass();
    java.lang.String var39 = var32.toString();
    boolean var40 = var24.equals((java.lang.Object)var32);
    java.lang.Class var41 = var24.getDeclaringClass();
    boolean var42 = var1.equals((java.lang.Object)var41);
    java.lang.Enum var44 = java.lang.Enum.<java.lang.Enum>valueOf(var41, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "STRING"+ "'", var39.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    boolean var19 = var1.equals((java.lang.Object)1.0f);
    java.lang.Class var20 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var23 = var22.ordinal();
    java.lang.String var24 = var22.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var28 = var26.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var30 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var31 = var26.equals((java.lang.Object)var30);
    java.lang.Class var32 = var30.getDeclaringClass();
    java.lang.Enum var34 = java.lang.Enum.<java.lang.Enum>valueOf(var32, "ERROR");
    boolean var36 = var34.equals((java.lang.Object)100.0f);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var38 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var40 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var42 = var40.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var44 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var45 = var40.equals((java.lang.Object)var44);
    int var46 = var44.ordinal();
    boolean var47 = var38.equals((java.lang.Object)var46);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var48 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var49 = var38.equals((java.lang.Object)var48);
    boolean var50 = var34.equals((java.lang.Object)var48);
    boolean var51 = var22.equals((java.lang.Object)var34);
    boolean var52 = var1.equals((java.lang.Object)var22);
    java.lang.String var53 = var22.toString();
    int var54 = var22.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR"+ "'", var24.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "ERROR"+ "'", var53.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 3);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    java.lang.String var12 = var7.toString();
    java.lang.Class var13 = var7.getDeclaringClass();
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    boolean var19 = var1.equals((java.lang.Object)var18);
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "STRING");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var8 = var7.name();
    java.lang.Class var9 = var7.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    boolean var26 = var7.equals((java.lang.Object)var25);
    java.lang.String var27 = var7.name();
    java.lang.Class var28 = var7.getDeclaringClass();
    boolean var29 = var1.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    int var20 = var9.ordinal();
    java.lang.Class var21 = var9.getDeclaringClass();
    java.lang.Class var22 = var9.getDeclaringClass();
    java.lang.Class var23 = var9.getDeclaringClass();
    int var24 = var9.ordinal();
    java.lang.String var25 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR"+ "'", var25.equals("ERROR"));

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.String var10 = var1.toString();
    java.lang.String var11 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var14 = var13.name();
    java.lang.String var15 = var13.toString();
    java.lang.String var16 = var13.name();
    java.lang.String var17 = var13.name();
    java.lang.String var18 = var13.name();
    boolean var19 = var1.equals((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ERROR"+ "'", var18.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.String var6 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    boolean var22 = var9.equals((java.lang.Object)"STRING");
    java.lang.Class var23 = var9.getDeclaringClass();
    java.lang.Class var24 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    java.lang.Class var11 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    boolean var16 = var14.equals((java.lang.Object)'4');
    java.lang.Class var17 = var14.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "STRING");
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var6 = var5.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var9 = var8.ordinal();
    java.lang.String var10 = var8.toString();
    java.lang.String var11 = var8.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    boolean var24 = var8.equals((java.lang.Object)var19);
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "STRING");
    boolean var27 = var5.equals((java.lang.Object)var26);
    java.lang.Class var28 = var26.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    java.lang.String var2 = var1.toString();
    int var3 = var1.ordinal();
    java.lang.Class var4 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "STRING"+ "'", var2.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.name();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    java.lang.Class var10 = var7.getDeclaringClass();
    java.lang.String var11 = var7.name();
    java.lang.String var12 = var7.toString();
    int var13 = var7.ordinal();
    java.lang.Class var14 = var7.getDeclaringClass();
    boolean var15 = var1.equals((java.lang.Object)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var13.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var17 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var18 = var13.equals((java.lang.Object)var17);
    java.lang.Class var19 = var13.getDeclaringClass();
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "STRING");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var19, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var25 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var26 = var25.name();
    java.lang.Class var27 = var25.getDeclaringClass();
    java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "ERROR");
    java.lang.Class var30 = var29.getDeclaringClass();
    java.lang.Enum var32 = java.lang.Enum.<java.lang.Enum>valueOf(var30, "STRING");
    java.lang.String var33 = var32.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var34 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var35 = var32.equals((java.lang.Object)var34);
    java.lang.Class var36 = var32.getDeclaringClass();
    java.lang.Class var37 = var32.getDeclaringClass();
    boolean var38 = var23.equals((java.lang.Object)var37);
    boolean var39 = var11.equals((java.lang.Object)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var41 = java.lang.Enum.<java.lang.Enum>valueOf(var37, "BLANK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ERROR"+ "'", var26.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "STRING"+ "'", var33.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    boolean var11 = var9.equals((java.lang.Object)100.0f);
    java.lang.String var12 = var9.name();
    java.lang.String var13 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    java.lang.String var7 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.Class var12 = var5.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    boolean var16 = var14.equals((java.lang.Object)'4');
    int var17 = var14.ordinal();
    int var18 = var14.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.String var10 = var9.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    int var18 = var16.ordinal();
    java.lang.String var19 = var16.name();
    int var20 = var16.ordinal();
    int var21 = var16.ordinal();
    java.lang.Class var22 = var16.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "ERROR");
    int var27 = var26.ordinal();
    boolean var28 = var9.equals((java.lang.Object)var26);
    java.lang.String var29 = var26.toString();
    java.lang.Class var30 = var26.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "STRING"+ "'", var19.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ERROR"+ "'", var29.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    boolean var12 = var1.equals((java.lang.Object)var7);
    java.lang.String var13 = var7.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var15.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var15.equals((java.lang.Object)var19);
    java.lang.Class var21 = var15.getDeclaringClass();
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "STRING");
    java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "ERROR");
    java.lang.Class var26 = var25.getDeclaringClass();
    java.lang.String var27 = var25.toString();
    boolean var28 = var7.equals((java.lang.Object)var27);
    java.lang.String var29 = var7.name();
    java.lang.Class var30 = var7.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ERROR"+ "'", var29.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    java.lang.String var6 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var9 = var8.name();
    java.lang.String var10 = var8.toString();
    java.lang.Class var11 = var8.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var20 = var18.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var23 = var18.equals((java.lang.Object)var22);
    int var24 = var22.ordinal();
    boolean var25 = var16.equals((java.lang.Object)var24);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var26 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var27 = var16.equals((java.lang.Object)var26);
    boolean var28 = var26.isMacroDetected();
    boolean var29 = var26.isMacroDetected();
    boolean var30 = var26.isMacroDetected();
    boolean var31 = var26.isMacroDetected();
    boolean var32 = var26.isMacroDetected();
    boolean var33 = var13.equals((java.lang.Object)var26);
    boolean var34 = var26.isMacroDetected();
    boolean var35 = var26.isMacroDetected();
    boolean var36 = var26.isMacroDetected();
    boolean var37 = var26.isMacroDetected();
    boolean var38 = var26.isMacroDetected();
    boolean var39 = var26.isMacroDetected();
    boolean var40 = var26.isMacroDetected();
    boolean var41 = var26.isMacroDetected();
    boolean var42 = var26.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "STRING"+ "'", var5.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    boolean var5 = var1.equals((java.lang.Object)(byte)100);
    java.lang.String var6 = var1.toString();
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.String var8 = var1.name();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Class var12 = var11.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var21 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.Enum var27 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    java.lang.Enum var31 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    boolean var32 = var5.equals((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    int var10 = var5.ordinal();
    java.lang.Class var11 = var5.getDeclaringClass();
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "ERROR");
    java.lang.Class var14 = var13.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var8 = var7.name();
    java.lang.String var9 = var7.toString();
    boolean var11 = var7.equals((java.lang.Object)(byte)100);
    java.lang.String var12 = var7.toString();
    java.lang.Class var13 = var7.getDeclaringClass();
    boolean var14 = var1.equals((java.lang.Object)var13);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var17 = var16.name();
    java.lang.Class var18 = var16.getDeclaringClass();
    boolean var19 = var1.equals((java.lang.Object)var18);
    java.lang.Class var20 = var1.getDeclaringClass();
    java.lang.Class var21 = var1.getDeclaringClass();
    java.lang.String var22 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ERROR"+ "'", var17.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "STRING");
    java.lang.String var9 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var10 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var11 = var8.equals((java.lang.Object)var10);
    java.lang.String var12 = var8.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var14.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var19 = var14.equals((java.lang.Object)var18);
    java.lang.Class var20 = var18.getDeclaringClass();
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    java.lang.Enum var28 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "STRING");
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "STRING");
    boolean var31 = var8.equals((java.lang.Object)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var33 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.Class var25 = var24.getDeclaringClass();
    int var26 = var24.ordinal();
    int var27 = var24.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 5);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "BLANK");
    java.lang.String var7 = var6.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "BLANK"+ "'", var7.equals("BLANK"));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.Class var8 = var5.getDeclaringClass();
    java.lang.String var9 = var5.toString();
    java.lang.Class var10 = var5.getDeclaringClass();
    boolean var11 = var1.equals((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "STRING"+ "'", var3.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var12 = var11.name();
    java.lang.Class var13 = var11.getDeclaringClass();
    java.lang.Class var14 = var11.getDeclaringClass();
    boolean var15 = var9.equals((java.lang.Object)var14);
    java.lang.Class var16 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR"+ "'", var12.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Class var6 = var1.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Class var9 = var8.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    java.lang.Class var25 = var24.getDeclaringClass();
    java.lang.Enum var27 = java.lang.Enum.<java.lang.Enum>valueOf(var25, "STRING");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var6 = var5.name();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var8 = var7.toString();
    java.lang.Class var9 = var7.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    boolean var4 = var1.equals((java.lang.Object)1.0d);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var6 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var6.equals((java.lang.Object)var10);
    java.lang.Class var12 = var10.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.String var17 = var16.name();
    boolean var18 = var1.equals((java.lang.Object)var17);
    java.lang.String var19 = var1.name();
    java.lang.Class var20 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR"+ "'", var19.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var6 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "STRING"+ "'", var6.equals("STRING"));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "STRING");
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var14 = var13.name();
    java.lang.Class var15 = var13.getDeclaringClass();
    java.lang.Enum var17 = java.lang.Enum.<java.lang.Enum>valueOf(var15, "ERROR");
    java.lang.Class var18 = var17.getDeclaringClass();
    java.lang.Enum var20 = java.lang.Enum.<java.lang.Enum>valueOf(var18, "STRING");
    java.lang.String var21 = var20.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var22 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var23 = var20.equals((java.lang.Object)var22);
    java.lang.Class var24 = var20.getDeclaringClass();
    java.lang.Class var25 = var20.getDeclaringClass();
    boolean var26 = var11.equals((java.lang.Object)var25);
    java.lang.String var27 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR"+ "'", var14.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING"+ "'", var21.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    java.lang.String var7 = var4.toString();
    java.lang.Class var8 = var4.getDeclaringClass();
    int var9 = var4.ordinal();
    boolean var10 = var1.equals((java.lang.Object)var4);
    java.lang.String var11 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING"+ "'", var7.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR"+ "'", var11.equals("ERROR"));

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var11.getDeclaringClass();
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    java.lang.String var16 = var15.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var19 = var15.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var22 = var21.ordinal();
    java.lang.String var23 = var21.toString();
    int var24 = var21.ordinal();
    boolean var25 = var15.equals((java.lang.Object)var21);
    java.lang.String var26 = var21.name();
    java.lang.String var27 = var21.toString();
    int var28 = var21.ordinal();
    boolean var29 = var1.equals((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "STRING"+ "'", var26.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "STRING"+ "'", var27.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType[] var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.values();
    boolean var11 = var5.equals((java.lang.Object)var10);
    java.lang.String var12 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var3 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var4 = var1.equals((java.lang.Object)var3);
    int var5 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    java.lang.Class var10 = var7.getDeclaringClass();
    java.lang.String var11 = var7.name();
    java.lang.String var12 = var7.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var15 = var14.name();
    java.lang.String var16 = var14.toString();
    java.lang.Class var17 = var14.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var7.equals((java.lang.Object)var19);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var22 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var26 = var24.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var28 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var29 = var24.equals((java.lang.Object)var28);
    int var30 = var28.ordinal();
    boolean var31 = var22.equals((java.lang.Object)var30);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener var32 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MacroListener();
    boolean var33 = var22.equals((java.lang.Object)var32);
    boolean var34 = var32.isMacroDetected();
    boolean var35 = var32.isMacroDetected();
    boolean var36 = var32.isMacroDetected();
    boolean var37 = var32.isMacroDetected();
    boolean var38 = var32.isMacroDetected();
    boolean var39 = var19.equals((java.lang.Object)var32);
    boolean var40 = var32.isMacroDetected();
    boolean var41 = var32.isMacroDetected();
    boolean var42 = var32.isMacroDetected();
    boolean var43 = var32.isMacroDetected();
    boolean var44 = var32.isMacroDetected();
    boolean var45 = var1.equals((java.lang.Object)var32);
    boolean var46 = var32.isMacroDetected();
    boolean var47 = var32.isMacroDetected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING"+ "'", var12.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR"+ "'", var15.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.toString();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.toString();
    java.lang.String var5 = var1.toString();
    java.lang.String var6 = var1.name();
    java.lang.String var7 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ERROR"+ "'", var6.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var5.getDeclaringClass();
    java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "ERROR");
    java.lang.String var10 = var9.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var13 = var9.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var16 = var15.ordinal();
    java.lang.String var17 = var15.toString();
    int var18 = var15.ordinal();
    boolean var19 = var9.equals((java.lang.Object)var15);
    java.lang.String var20 = var9.name();
    int var21 = var9.ordinal();
    java.lang.String var22 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ERROR"+ "'", var10.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ERROR"+ "'", var20.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ERROR"+ "'", var22.equals("ERROR"));

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.name();
    java.lang.Class var5 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var7 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var9 = var7.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var7.equals((java.lang.Object)var11);
    java.lang.Class var13 = var11.getDeclaringClass();
    java.lang.Enum var15 = java.lang.Enum.<java.lang.Enum>valueOf(var13, "ERROR");
    java.lang.String var16 = var15.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var18 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    boolean var19 = var15.equals((java.lang.Object)5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var21 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    int var22 = var21.ordinal();
    java.lang.String var23 = var21.toString();
    int var24 = var21.ordinal();
    boolean var25 = var15.equals((java.lang.Object)var21);
    int var26 = var15.ordinal();
    java.lang.Class var27 = var15.getDeclaringClass();
    boolean var28 = var1.equals((java.lang.Object)var15);
    java.lang.String var29 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ERROR"+ "'", var16.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "STRING"+ "'", var23.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ERROR"+ "'", var29.equals("ERROR"));

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.Class var11 = var10.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var13 = java.lang.Enum.<java.lang.Enum>valueOf(var11, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    boolean var10 = var5.equals((java.lang.Object)true);
    java.lang.String var11 = var5.name();
    int var12 = var5.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 5);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(3);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Class var5 = var1.getDeclaringClass();
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var5, "BLANK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    java.lang.String var2 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var4 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var4.equals((java.lang.Object)(byte)10);
    boolean var7 = var1.equals((java.lang.Object)var4);
    java.lang.String var8 = var1.name();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var10 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var12 = var10.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var14 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var15 = var10.equals((java.lang.Object)var14);
    int var16 = var14.ordinal();
    java.lang.String var17 = var14.name();
    int var18 = var14.ordinal();
    int var19 = var14.ordinal();
    java.lang.Class var20 = var14.getDeclaringClass();
    boolean var21 = var1.equals((java.lang.Object)var20);
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var20, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ERROR"+ "'", var8.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING"+ "'", var17.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    java.lang.String var4 = var1.toString();
    java.lang.Class var5 = var1.getDeclaringClass();
    int var6 = var1.ordinal();
    int var7 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING"+ "'", var4.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    int var9 = var5.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var11 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var13 = var11.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var15 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var16 = var11.equals((java.lang.Object)var15);
    java.lang.Class var17 = var15.getDeclaringClass();
    java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "ERROR");
    boolean var20 = var5.equals((java.lang.Object)var17);
    java.lang.Enum var22 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "BLANK");
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "STRING");
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var27 = var26.name();
    java.lang.Class var28 = var26.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var30 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var32 = var30.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var34 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var35 = var30.equals((java.lang.Object)var34);
    boolean var36 = var26.equals((java.lang.Object)var34);
    int var37 = var34.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var39 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("ERROR");
    java.lang.String var40 = var39.name();
    java.lang.String var41 = var39.name();
    boolean var42 = var34.equals((java.lang.Object)var41);
    java.lang.Class var43 = var34.getDeclaringClass();
    int var44 = var34.ordinal();
    boolean var45 = var24.equals((java.lang.Object)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "ERROR"+ "'", var40.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "ERROR"+ "'", var41.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var7 = var5.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var10 = var5.equals((java.lang.Object)var9);
    boolean var11 = var1.equals((java.lang.Object)var9);
    java.lang.Class var12 = var1.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.Enum var16 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "STRING");
    java.lang.Class var17 = var16.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var5.ordinal();
    java.lang.String var8 = var5.name();
    java.lang.String var9 = var5.name();
    java.lang.String var10 = var5.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var13 = var12.name();
    int var14 = var12.ordinal();
    boolean var15 = var5.equals((java.lang.Object)var12);
    boolean var17 = var5.equals((java.lang.Object)6);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var19 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var21 = var19.equals((java.lang.Object)(byte)10);
    java.lang.String var22 = var19.toString();
    java.lang.Class var23 = var19.getDeclaringClass();
    int var24 = var19.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var26 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var27 = var26.name();
    java.lang.Class var28 = var26.getDeclaringClass();
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "ERROR");
    java.lang.Class var31 = var30.getDeclaringClass();
    java.lang.Enum var33 = java.lang.Enum.<java.lang.Enum>valueOf(var31, "STRING");
    java.lang.String var34 = var33.toString();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener var35 = new net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.MetadataListener();
    boolean var36 = var33.equals((java.lang.Object)var35);
    java.lang.Class var37 = var33.getDeclaringClass();
    boolean var38 = var19.equals((java.lang.Object)var37);
    boolean var39 = var5.equals((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ERROR"+ "'", var13.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "STRING"+ "'", var22.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR"+ "'", var27.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "STRING"+ "'", var34.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    int var7 = var1.ordinal();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var8 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.valueOf("STRING");
    java.lang.Class var9 = var8.getDeclaringClass();
    boolean var10 = var1.equals((java.lang.Object)var8);
    java.lang.String var11 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING"+ "'", var11.equals("STRING"));

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.valueOf("ERROR");
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.name();
    int var5 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.String var4 = var1.name();
    java.lang.String var5 = var1.name();
    int var6 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ERROR"+ "'", var5.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(5);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.name();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ERROR"+ "'", var4.equals("ERROR"));

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var9 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var11 = var9.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var13 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var9.equals((java.lang.Object)var13);
    java.lang.Class var15 = var9.getDeclaringClass();
    java.lang.String var16 = var9.toString();
    boolean var17 = var1.equals((java.lang.Object)var9);
    int var18 = var1.ordinal();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var20.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var25 = var20.equals((java.lang.Object)var24);
    java.lang.Class var26 = var20.getDeclaringClass();
    int var27 = var20.ordinal();
    java.lang.Class var28 = var20.getDeclaringClass();
    java.lang.Enum var30 = java.lang.Enum.<java.lang.Enum>valueOf(var28, "STRING");
    int var31 = var30.ordinal();
    boolean var32 = var1.equals((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "STRING"+ "'", var16.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.String var3 = var1.toString();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var4, "ERROR");
    java.lang.String var7 = var6.name();
    java.lang.Class var8 = var6.getDeclaringClass();
    java.lang.String var9 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR"+ "'", var3.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ERROR"+ "'", var7.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Enum var7 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "STRING");
    java.lang.String var8 = var7.toString();
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "STRING"+ "'", var8.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING"+ "'", var9.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "STRING"+ "'", var10.equals("STRING"));

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var3 = var1.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var5 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.Class var7 = var1.getDeclaringClass();
    int var8 = var1.ordinal();
    java.lang.Class var9 = var1.getDeclaringClass();
    java.lang.Enum var11 = java.lang.Enum.<java.lang.Enum>valueOf(var9, "STRING");
    java.lang.Class var12 = var11.getDeclaringClass();
    java.lang.Enum var14 = java.lang.Enum.<java.lang.Enum>valueOf(var12, "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType var1 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.InputCellType.fromCellType(5);
    java.lang.String var2 = var1.name();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Enum var5 = java.lang.Enum.<java.lang.Enum>valueOf(var3, "ERROR");
    java.lang.Class var6 = var5.getDeclaringClass();
    java.lang.Enum var8 = java.lang.Enum.<java.lang.Enum>valueOf(var6, "ERROR");
    java.lang.String var9 = var8.toString();
    java.lang.Class var10 = var8.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var12 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var14 = var12.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var16 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var17 = var12.equals((java.lang.Object)var16);
    java.lang.Class var18 = var12.getDeclaringClass();
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var20 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var22 = var20.equals((java.lang.Object)(byte)10);
    net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType var24 = net.barik.spreadsheet.analysis.SpreadsheetAnalyzer.FunctionEvalType.fromCellType(1);
    boolean var25 = var20.equals((java.lang.Object)var24);
    java.lang.Class var26 = var20.getDeclaringClass();
    java.lang.String var27 = var20.toString();
    boolean var28 = var12.equals((java.lang.Object)var20);
    int var29 = var20.ordinal();
    java.lang.String var30 = var20.toString();
    boolean var31 = var8.equals((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ERROR"+ "'", var2.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ERROR"+ "'", var9.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "STRING"+ "'", var27.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "STRING"+ "'", var30.equals("STRING"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

}
